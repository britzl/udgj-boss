go.property("player_id", 1)
go.property("linear_speed", 100)
go.property("angular_speed", 50)

local mapper = require "in.mapper"
local state = require "in.state"


local STRAFE_LEFT = hash("strafe_left")
local STRAFE_RIGHT = hash("strafe_right")
local MOVE_FORWARD = hash("move_forward")
local MOVE_BACKWARD = hash("move_backward")
local ATTACK = hash("attack")

local ZERO = vmath.vector3()


local function float(url, delay)
	local pos = go.get_position(url)
	go.animate(url, "position.y", go.PLAYBACK_LOOP_PINGPONG, pos.y + 3, go.EASING_INOUTQUAD, 1, delay)
end

local function attack(self)
	local id = factory.create("#weaponfactory")
	local pos = go.get_position(id)
	local dist = vmath.length(pos - ZERO)
	local a = math.atan2(pos.y, pos.x)
	go.set_rotation(vmath.quat_rotation_z(a + math.rad(90)), id)
	go.set_position(pos, id)
		go.animate(id, "position", go.PLAYBACK_ONCE_FORWARD, ZERO, go.EASING_INQUAD, dist / 400, 0, function()
		go.delete(id)
	end)
end

function init(self)
	msg.post(".", "acquire_input_focus")
	ZERO.z = go.get_position().z
	
	float("helmet", 0.1)
	float("armor", 0)

	mapper.bind(mapper.KEY_LEFT, STRAFE_LEFT, self.player_id)
	mapper.bind(mapper.KEY_RIGHT, STRAFE_RIGHT, self.player_id)
	mapper.bind(mapper.KEY_UP, MOVE_FORWARD, self.player_id)
	mapper.bind(mapper.KEY_DOWN, MOVE_BACKWARD, self.player_id)
	mapper.bind(mapper.KEY_SPACE, ATTACK, self.player_id)

	self.state = state.create()
end


function update(self, dt)
	local pos = go.get_position()

	local function strafe(dir)
		local dist = vmath.length(pos - ZERO)
		local a = math.atan2(pos.y, pos.x)
		a = a + (math.rad(self.angular_speed * dt) / (dist * 0.01)) * dir
		pos.x = dist * math.cos(a)
		pos.y = dist * math.sin(a)
	end

	local function move(dir)
		local a = math.atan2(pos.y, pos.x)
		pos.x = pos.x - math.cos(a) * self.linear_speed * dt * dir
		pos.y = pos.y - math.sin(a) * self.linear_speed * dt * dir
	end
		
	if self.state.is_pressed(MOVE_FORWARD) then
		move(1)
	elseif self.state.is_pressed(MOVE_BACKWARD) then
		move(-1)
	end
	if self.state.is_pressed(STRAFE_LEFT) then
		strafe(-1)
	elseif self.state.is_pressed(STRAFE_RIGHT) then
		strafe(1)
	end

	local a = math.atan2(pos.y, pos.x)
	go.set_rotation(vmath.quat_rotation_z(a + math.rad(90)), "weapon")

	go.set_position(pos)
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Remove this function if not needed
end

function on_input(self, action_id, action)
	action_id = mapper.on_input(action_id, self.player_id)
	self.state.on_input(action_id, action)
	if action_id == ATTACK and action.released then
		attack(self)
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Remove this function if not needed
end
