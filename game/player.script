go.property("player_id", 1)
go.property("linear_speed", 100)
go.property("angular_speed", 50)

local mapper = require "in.mapper"
local state = require "in.state"
local camera = require "orthographic.camera"
local utils = require "game.utils"
local boss = require "game.bosses.boss"

local STRAFE_LEFT = hash("strafe_left")
local STRAFE_RIGHT = hash("strafe_right")
local MOVE_FORWARD = hash("move_forward")
local MOVE_BACKWARD = hash("move_backward")
local ATTACK = hash("attack")

local ZERO = vmath.vector3()

local CAMERA = hash("/camera")

local CAMERA_FOLLOW_OPTIONS = {
	offset = vmath.vector3()
}

local MAX_HEALTH = 10


local function position(id, angle, distance)
	local pos = go.get_position(id)
	pos.x = distance * math.cos(angle)
	pos.y = distance * math.sin(angle)
	go.set_position(pos, id)
end

local function attack(self)
	local player_pos = go.get_position()
	local angle = math.atan2(player_pos.y, player_pos.x)
	local pos = player_pos + vmath.vector3(-28 * math.cos(angle), -28 * math.sin(angle), 0)
	local rot = vmath.quat_rotation_z(angle + math.rad(90))
	local id = factory.create("#weaponfactory", pos, rot)
	local dist = vmath.length(pos - ZERO)
	go.animate(id, "position", go.PLAYBACK_ONCE_FORWARD, ZERO, go.EASING_INQUAD, dist / 600, 0, function()
		go.delete(id)
	end)
end

local function send_to_hud(message_id, message)
	msg.post("/ui", message_id, message)
end

local function update_health(self, health)
	self.health = math.min(health, MAX_HEALTH)
	send_to_hud("player_health", { health = self.health, max = MAX_HEALTH })
end

local function take_damage(self)
	update_health(self, self.health - 1)
	self.enabled = false
	msg.post("#collisionobject", "disable")
	utils.blink("helmet", 2, 0.4)
	utils.blink("armor", 2, 0.4)
	camera.shake(CAMERA, 0.0025, 0.2)
	local pos = go.get_position()
	local angle = math.atan2(pos.y, pos.x)
	local to = go.get_position() + vmath.vector3(math.cos(angle) * 40, math.sin(angle) * 40, 0)
	go.animate(".", "position", go.PLAYBACK_ONCE_FORWARD, to, go.EASING_OUTQUAD, 0.4, 0, function()
		if self.health == 0 then
			print("dead")
		else
			msg.post("#collisionobject", "enable")
			self.enabled = true
		end
	end)
end

function init(self)
	msg.post(".", "acquire_input_focus")
	ZERO.z = go.get_position().z
	
	utils.float("helmet", 0.1)
	utils.float("armor", 0)

	mapper.bind(mapper.KEY_LEFT, STRAFE_LEFT, self.player_id)
	mapper.bind(mapper.KEY_RIGHT, STRAFE_RIGHT, self.player_id)
	mapper.bind(mapper.KEY_UP, MOVE_FORWARD, self.player_id)
	mapper.bind(mapper.KEY_DOWN, MOVE_BACKWARD, self.player_id)
	mapper.bind(mapper.KEY_SPACE, ATTACK, self.player_id)

	self.state = state.create()
	self.enabled = true
	update_health(self, 10)
end


function update(self, dt)
	if not self.enabled then return end
	
	local pos = go.get_position()
	local angle = math.atan2(pos.y, pos.x)
	
	local function strafe(dir)
		local dist = vmath.length(pos - ZERO)
		local a = angle + (math.rad(self.angular_speed * dt) / (dist * 0.01)) * dir
		pos.x = dist * math.cos(a)
		pos.y = dist * math.sin(a)
	end

	local function move(dir)
		pos.x = pos.x - math.cos(angle) * self.linear_speed * dt * dir
		pos.y = pos.y - math.sin(angle) * self.linear_speed * dt * dir
	end
		
	if self.state.is_pressed(MOVE_FORWARD) then
		move(1)
	elseif self.state.is_pressed(MOVE_BACKWARD) then
		move(-1)
	end
	if self.state.is_pressed(STRAFE_LEFT) then
		strafe(-1)
	elseif self.state.is_pressed(STRAFE_RIGHT) then
		strafe(1)
	end

	-- adjust camera offset
	CAMERA_FOLLOW_OPTIONS.offset.x = math.cos(angle) * -200
	CAMERA_FOLLOW_OPTIONS.offset.y = math.sin(angle) * -100
	camera.follow(CAMERA, go.get_id(), CAMERA_FOLLOW_OPTIONS)

	-- rotate weapon
	go.set_rotation(vmath.quat_rotation_z(angle + math.rad(90)), "weapon")

	go.set_position(pos)
end

function on_message(self, message_id, message, sender)
	if message_id == hash("collision_response") then
		if message.group == hash("shield") then
			take_damage(self)
		elseif message.group == hash("enemy") then
			take_damage(self)
			go.delete(message.other_id)
			boss.OBJECT_DESTROYED.trigger(message.other_id)
		elseif message.group == hash("bullet") then
			take_damage(self)
			go.delete(message.other_id)
			boss.OBJECT_DESTROYED.trigger(message.other_id)
		end
	end
end

function on_input(self, action_id, action)
	action_id = mapper.on_input(action_id, self.player_id)
	self.state.on_input(action_id, action)
	if not self.enabled then return end

	if action_id == ATTACK and action.released then
		attack(self)
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Remove this function if not needed
end
